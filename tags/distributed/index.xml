<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>distributed on Dwarves Foundation</title><link>https://note.d.foundation/tags/distributed/</link><description>Recent content in distributed on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2023 Dwarves Foundation.</copyright><lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://note.d.foundation/tags/distributed/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview On Broker Pattern In Distributed System</title><link>https://note.d.foundation/memo/overview-on-broker-pattern-in-distributed-system/</link><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/overview-on-broker-pattern-in-distributed-system/</guid><description>Definition The broker pattern is an architectural pattern that can be used to structure distributed software systems with decoupled components that interact by remote procedure calls. A broker component is responsible for coordinating communication, such as forwarding requests, as well as for transmitting results and exceptions.
Component Clients: implements user functionality, send requests to server through a client-side proxy Server: Implements services, registers itself with the local broker, send responses and exceptions back the client through a server-side proxy Broker(a messenger that is responsible for the transmission of requests from clients to servers): registers server, offers interface(APIs, &amp;hellip;), transfer messages, error recovery, interoperates with other brokers through bridges, locates servers Client-side proxy(a layer between clients and the broker): encapsulates system-specific functionality, mediates between the client and the broker Server-side proxy: calls services within the server, encapsulates system-specific functionality, mediates between server and the broker Bridge( responsible for communication among brokers): encapsulates network-specific functionality, mediates between the local broker and the bridge of a remote broker The role of Broker Patter Our system need to be dynamically removing or adding new agent(server, client) The agents in our system need the ability to be independent of each other( scalable, partition functionality into independent agents) The ability of Broker Pattern In the decoupled behavior, Broker acts like an interface, when a new server was adding on the system, it just like add a new object, and the only thing we need to do is to register the new server with Broker.</description></item><item><title>Federated Byzantine</title><link>https://note.d.foundation/memo/federated-byzantine/</link><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/federated-byzantine/</guid><description>Stellar is all about trust (validators). After all, when you have to trust somebody, you&amp;rsquo;d trust the reputated nodes, rather than a random stranger node on the internet.
You can imagine Quorum as a list of validators. Every Stellar node has its chosen validators in its own Quorum. For new nodes (e.g. by domestic users like me), we tend to choose the official/reputated nodes (e.g. nodes at SDF/IBM) to trust / to be the validators in our Quorum.</description></item></channel></rss>