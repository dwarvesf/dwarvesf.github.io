<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Dwarves Foundation</title><link>https://memo.d.foundation/tags/golang/</link><description>Recent content in Golang on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 14 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>How does Go achieve type safety when it enables generics?</title><link>https://memo.d.foundation/playground/go/go-generics-type-safety/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-generics-type-safety/</guid><description>Go introduced generics with Go 1.18, which was officially released in March 2022. This update allowed Go developers to write more flexible and reusable code by supporting type parameters, enabling functions, and data structures to work with different types without sacrificing type safety.</description></item><item><title>Go Commentary #13: Compiler Quests and Vector Vexations</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-27/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-27/</guid><description>Register Allocation in the Go Compiler Red Hat has graced us with a deep dive into Go&amp;rsquo;s register allocation in the compiler.</description></item><item><title>Go Commentary #12: CLI Renaissance with Kubernetes, REST, and Terminal Readers in the Age of Complexity</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-20/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-20/</guid><description>kl: An interactive Kubernetes log viewer for your terminal An interactive Kubernetes log viewer for your terminal.
// Example usage of kl kl --context my-context,other-context -n default,other-ns This tool allows you to view logs across multiple containers, pods, and even clusters.</description></item><item><title>Go Commentary #11: The Gopher's LLM Revolution - Actors, Frameworks, and the Future of Go</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-13/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-13/</guid><description>Go Survey The feedbacks from us - Gophers will help Go Team to understand: How Go is being used across various industries and organizations The challenges you face as a Go developer The features and improvements you’d like to see in future releases How we can better support the thriving Go community Building LLM-powered applications in Go Ah, the sweet smell of progress mixed with the stench of hype.</description></item><item><title>Go Commentary #10: Script, Telemetry</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-06/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-sep-06/</guid><description>Script: Making it easy to write shell-like scripts in Go Go library that simplifies writing shell-like scripts by providing a fluent API for common operations like file manipulation, text processing, and command execution.</description></item><item><title>Efficient Union of Finite Automata in Golang: A Practical Approach</title><link>https://memo.d.foundation/playground/go/compute-union-2-finite-automata/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/compute-union-2-finite-automata/</guid><description>1. What is Finite Automata? (A Simple Explanation) Finite Automata (FA), also known as Finite State Machines, are abstract computational models used to recognize patterns or process sequences of symbols.</description></item><item><title>Go Commentary #9: TinyGo, SQLite Vector Search, and Authorization</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-30/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-30/</guid><description>TinyGo 0.33.0: The Go Compiler for &amp;lsquo;Small Places&amp;rsquo; Context:
TinyGo is a Go compiler designed for small environments like microcontrollers, WebAssembly (wasm/wasi), and command-line tools.</description></item><item><title>Go Commentary #8: Jupyter Notebooks, Kubernetes Tools, GopherCon Talks</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-23/</link><pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-23/</guid><description>GoNB: A Go Notebook Kernel for Jupyter Auto-complete and contextual help while coding. Rich content display: HTML, markdown (with latex), images, javascript, svg, videos, etc.</description></item><item><title>Go Commentary #7: Releases, Websockets, and Struct Behavior</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-16/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-16/</guid><description>Go 1.23 Release Note Full notes that you should skim through to get full-fledged of Go 1.23 A New Home for nhooyr/websocket nhooyr/websocket is adopted by Coder, CDE - Cloud Development Environment Go structs are copied on assignment Inspired by Common Go Mistakes type Thing struct { Name string } func main() { thing := Thing{&amp;quot;record&amp;quot;} other_thing := thing other_thing.</description></item><item><title>Go Commentary #6: GUI Framework, Leadership Change</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-09/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-09/</guid><description>Cogent Core: A New GUI Framework for Go GUI framework written in Go that allows you Code Once, Rune Everywhere (Core) (macOS, Windows, Linux, iOS, Android and web)</description></item><item><title>Go Commentary #5: Features, Memory Optimization, Minecraft Server, Code Editor, and LLM Tool</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-02/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-aug-02/</guid><description>Go Features By Version Context:
Go is released every six months. Each major Go release is supported until there are two newer major releases.</description></item><item><title>Go Commentary #4: Ethical Hacking, HTTP Requests, Mac App Development</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-jul-26/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-jul-26/</guid><description>Using Go to send 500 Million HTTP Requests to 2.5 Million Hosts Context:
(Ethical hacking) To send 500 million of non RFC HTTP/1.</description></item><item><title>Go Commentary #3: Generic Collections, Generics Constraints, AI Bot</title><link>https://memo.d.foundation/playground/go/weekly/go-commentary-jul-12/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-commentary-jul-12/</guid><description>Writing generic collection types in Go: the missing documentation Context:
Generics were released in Go 1.18 (~2y), is not used very much - only in some good cases for methods in slices and maps packages.</description></item><item><title>Go Weekly #2: Go 1.23 Iterators</title><link>https://memo.d.foundation/playground/go/weekly/go-weekly-511/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-weekly-511/</guid><description>Why People are Angry over Go 1.23 Iterators Context:
Most languages provide standardized way to iterate over values stored in containers.</description></item><item><title>A Tour of Template method pattern with Golang</title><link>https://memo.d.foundation/playground/01_literature/template-method-design-pattern/</link><pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/template-method-design-pattern/</guid><description>Problem Just imagine we need to implement a registration feature for our applications (web, mobile). A typical registration will have some basic steps such as fill in the form, verify account, redirect to login page, etc.</description></item><item><title>Go Weekly #1: Mastering Go Performance - eBPF and PGO Optimization Techniques</title><link>https://memo.d.foundation/playground/go/weekly/go-weekly-510/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/go-weekly-510/</guid><description>An Applied Introduction to eBPF with Go Context:
We usually write software in user space (outside the OS&amp;rsquo;s kernel, e.</description></item><item><title>A tour of Singleton design pattern with Golang</title><link>https://memo.d.foundation/playground/01_literature/singleton-design-pattern/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/singleton-design-pattern/</guid><description>Problem Just imagine we need to build a simple web page to show live subscribers of a Youtube channel. Main object here is &amp;ldquo;subscriber&amp;rdquo; so we need a tool (counter) to update number of subscribers in real-time.</description></item><item><title>What's New in November 2023</title><link>https://memo.d.foundation/updates/changelog/2023-whats-new-november/</link><pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/updates/changelog/2023-whats-new-november/</guid><description>Last November, we kicked off the Labs team, introduced Salary Advance for the Dwarves, upgraded note.d.foundation, supported Golang meetup, and demonstrated craftsmanship through various case studies and demos.</description></item><item><title>Go In Software Engineering</title><link>https://memo.d.foundation/playground/go/go-in-software-engineering/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-in-software-engineering/</guid><description>Go is a type-safe, cloud-native language designed for simplicity with first-class support for concurrency.
The software community has been hungering for a small, simple, easy-to-learn and pragmatic programming language.</description></item><item><title>Go Concurrency</title><link>https://memo.d.foundation/playground/go/go-concurrency/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-concurrency/</guid><description>Golang concurrency When we talk about Golang, its most basic and popular characteristic is concurrency-support. Unlike other languages what is quite complex to build an concurrency system, Go concurrency primitives via Goroutines and channels make concurrent programming easy.</description></item><item><title>Slice And Array In Golang</title><link>https://memo.d.foundation/playground/go/slice-and-array-in-golang/</link><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/slice-and-array-in-golang/</guid><description>Array TL;DR: The differences between array in Go and C:
Arrays are values. Assigning one array to another copies all the elements.</description></item></channel></rss>