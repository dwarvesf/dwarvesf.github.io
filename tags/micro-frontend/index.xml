<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Micro-Frontend on Dwarves Foundation</title><link>https://memo.d.foundation/tags/micro-frontend/</link><description>Recent content in Micro-Frontend on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 24 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/micro-frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>Lessons Learned From Being A Part Of Corporate Micro Frontend Implementation</title><link>https://memo.d.foundation/memo/lessons-learned-from-being-a-part-of-corporate-micro-frontend-implementation/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/lessons-learned-from-being-a-part-of-corporate-micro-frontend-implementation/</guid><description>Introduction As we venture further into the dynamic world of frontend development, we developers are on a constant quest for techniques that boost productivity, maintainability, and collaboration among multiple teams. Micro-frontends have risen to prominence as a favored architectural choice for achieving these goals. In this article, we&amp;rsquo;ll dive into the experiences and insights we&amp;rsquo;ve gained from a recent corporate micro-frontend implementation project, shedding light on the technical specifics and best practices that can be applied to comparable endeavors.</description></item><item><title>A Case Study Interview Into Micro Frontends Building Design System For E Commerce Platform</title><link>https://memo.d.foundation/memo/a-case-study-interview-into-micro-frontends-building-design-system-for-e-commerce-platform/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/a-case-study-interview-into-micro-frontends-building-design-system-for-e-commerce-platform/</guid><description>A Case Study Interview into Micro-Frontends: Building Design System for E-commerce Platform Previously on Why Micro-Frontend, we took a look into what is Micro-Frontend architecture, as well as some core concepts behind it. For some of you that have missed the memo, here’s a tl;dr:
Micro frontend architecture is an approach to building web applications by splitting the user interface into smaller, independent, and reusable parts. Each part is owned and developed by a separate team, and they are brought together in the browser to create a single, seamless user experience.</description></item><item><title>Why Micro Frontend</title><link>https://memo.d.foundation/memo/why-micro-frontend/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/why-micro-frontend/</guid><description>Micro-Frontend - What &amp;amp; Why? As web applications become more complex and feature-rich, traditional frontend architectures such as monolithic will become harder to maintain, scale, and evolve. Micro-frontend is an emerging front-end architecture that aims to address these challenges by breaking down the front-end into small, independent and reusable modules.
In this article, we will explore the concept of micro-frontend, its benefits, design principles, tools and technologies, implementation strategies, and challenges.</description></item><item><title>Micro Frontends Microservices For Frontend Development</title><link>https://memo.d.foundation/memo/micro-frontends---microservices-for-frontend-development/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/micro-frontends---microservices-for-frontend-development/</guid><description>Micro-frontend What is Micro-frontend ? An architectural style where independently deliverable frontend applications are composed into a greater whole
Benefits Smaller, more cohesive, and maintainable codebases More scalable organizations with decoupled, autonomous teams The ability to upgrade, update, or even rewrite parts of the frontend in a more incremental fashion than was previously possible Easier maintenance: Keeping frontend repositories small and specialized allows them to be more easily understood, and this simplifies long-term maintenance and testing.</description></item></channel></rss>