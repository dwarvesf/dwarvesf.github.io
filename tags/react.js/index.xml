<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React.js on Dwarves Foundation</title><link>https://note.d.foundation/tags/react.js/</link><description>Recent content in React.js on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2023 Dwarves Foundation.</copyright><lastBuildDate>Thu, 06 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://note.d.foundation/tags/react.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Different Ways To Test React Application</title><link>https://note.d.foundation/memo/different-ways-to-test-react-application/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/different-ways-to-test-react-application/</guid><description>Introduction There are 2 practical types of testing a front end application: test its implementation details (unit test, integration test combine with assert states of the component being tested) or testing its behavior base on perspective (e2e, integration test).
The content below assumes you already know about React hook (which is a new feature of React 16.08)
This is a repository link: https://github.com/phmngocnghia/TestReactComponent
This repository contains source code for the carousel component which we gonna test.</description></item><item><title>Setup React Project With Webpack And Babel</title><link>https://note.d.foundation/memo/setup-react-project-with-webpack-and-babel/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/setup-react-project-with-webpack-and-babel/</guid><description>Introduction create-react-app is an official CLI to create react application sometime you need to customize it such as add an alias or add plugin babel config, you end up ejected.
In this article, i’m going to demonstrate how to create simple webpack config to run react app. After reading this article, you will be able to create your own react webpack config and tweak it as you liked
Setup projects First you need to config three file such as:</description></item><item><title>Split And Reuse Code In React Application</title><link>https://note.d.foundation/memo/split-and-reuse-code-in-react-application/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/split-and-reuse-code-in-react-application/</guid><description>Introduction Sometimes you found that some piece of code that is very repetitive in your react application such as:
Modal: declare modal state and function to set modal state Fetch: declare fetch states such as loading and error In some Vue.js, you got the feature that allows you to encapsulate state and methods into the package that you can easily insert to your component logic called mixins. What have we got in React.</description></item><item><title>Hoc Renderprops And Hook In Reactjs</title><link>https://note.d.foundation/memo/hoc-renderprops-and-hook-in-reactjs/</link><pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/hoc-renderprops-and-hook-in-reactjs/</guid><description>Introduction HOC, Render-props, hook are different techniques to create reusable or composable logic in React.js.
Take a look at the use case where we have a button to toggle the visibility of some text:
import React, { Component } from 'react'; class App extends Component { constructor() { super() this.state = { isTextABCVisbible: true } } togggleTextABC = () =&amp;gt; { this.setState((state) =&amp;gt;({ isTextABCVisbible: !state.isTextABCVisbible })) } render() { return ( &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt; &amp;lt;button onClick={this.</description></item></channel></rss>