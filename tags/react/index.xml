<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Dwarves Foundation</title><link>https://memo.d.foundation/tags/react/</link><description>Recent content in React on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2024 Dwarves Foundation.</copyright><lastBuildDate>Sun, 28 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>React Server Components, NextJs Route and Data Fetching</title><link>https://memo.d.foundation/playground/frontend/react-server-component/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react-server-component/</guid><description>React Server Components, NextJs Route and Data Fetching React Server Components (RSCs) offer the flexibility to decide where to render components based on their purpose, diverging from the client-side rendering approach of Single-Page Applications.</description></item><item><title>Tackling Server State complexity in Frontend Development</title><link>https://memo.d.foundation/playground/frontend/tackling-server-state-complexity-in-frontend-development/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/tackling-server-state-complexity-in-frontend-development/</guid><description>Frontend development has become increasingly complex over the years, and with it, the need for efficient state management. Global State is one such programming pattern that has emerged as a solution to the problem of prop drilling.</description></item><item><title>When should we use useReducer instead of useState?</title><link>https://memo.d.foundation/playground/frontend/when-should-we-use-usereducer-instead-of-usestate/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/when-should-we-use-usereducer-instead-of-usestate/</guid><description>Imagine we have a component with multiple states. It is simple enough not to use state management libraries. useState is surely a choice for the sake of brevity and clarity.</description></item><item><title>Preserving and Resetting state in React</title><link>https://memo.d.foundation/playground/frontend/preserving-and-resetting-state-in-react/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/preserving-and-resetting-state-in-react/</guid><description>Why should you read this article? Understand how state in React works const [isPlayerA, setIsPlayerA] = useState(true) function Counter(name) { const [score, setScore] = useState(0) return ( &amp;lt;&amp;gt; &amp;lt;div&amp;gt; {name}: {score} &amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setScore(score + 1)}&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/&amp;gt; ) } // ---------- // Do you think they are the same?</description></item><item><title>Why Virtual DOM is fast?</title><link>https://memo.d.foundation/playground/frontend/why-virtual-dom-is-fast/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/why-virtual-dom-is-fast/</guid><description>React and Vue, two popular front-end frameworks, both use Virtual DOM to improve page rendering efficiency. Understanding the concept of Virtual DOM sheds light on an important aspect of performance optimization on the client side.</description></item><item><title>useEffect double calls in React 18</title><link>https://memo.d.foundation/playground/frontend/useeffect-double-calls-in-react-18/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/useeffect-double-calls-in-react-18/</guid><description>In the React 18 version, the useEffect hook has been updated to called twice compare to only one in the older version in StrictMode.</description></item></channel></rss>