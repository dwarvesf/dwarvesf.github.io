<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Dwarves Foundation</title><link>https://memo.d.foundation/tags/go/</link><description>Recent content in Go on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 22 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines</title><link>https://memo.d.foundation/memo/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</link><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</guid><description>Introduction Go provides us great and convenient ways to write concurrent programs with high performance to execute tasks concurrently (perhaps in parallel if the program is run on a machine with multiple physical cores, GOMAXPROCS are automatically set to the number of physical cores of the machine that the program is running on)
While the Go concurrency primitives are easy to work with (it means it&amp;rsquo;s easy to create the Go concurrency primitives and start using them), but they don&amp;rsquo;t prevent us the developers to write something incorrectly or buggy.</description></item><item><title>Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq</title><link>https://memo.d.foundation/memo/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</guid><description>At Dwarves Foundation, we host a few learning sessions to understand some of the technology around us. We regularly pick up topics we find interesting to dive deeper into to understand them better and present our findings. One topic that piqued my interest was the use of message brokers, due to how prevalent their use case is in our projects.
In today&amp;rsquo;s digital world, the exchange of information between different systems and applications is becoming increasingly important.</description></item><item><title>Unit Testing Best Practices In Golang</title><link>https://memo.d.foundation/memo/unit-testing-best-practices-in-golang/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/unit-testing-best-practices-in-golang/</guid><description>One common issue we often tackle in backend engineering is writing test cases. In this article, we will explore the techniques for crafting effective tests in Go, discussing best practices for writing unit tests and utilizing mocks to achieve better isolation. Although our primary focus lies in unit testing-related practices, it is important to note that Golang also supports integration testing. We will also tackle the subject of integration testing in a future article, where we will examine the details and best practices for integration testing in Golang.</description></item><item><title>Go In Software Engineering</title><link>https://memo.d.foundation/memo/go-in-software-engineering/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/go-in-software-engineering/</guid><description>Go is a type-safe, cloud-native language designed for simplicity
with first-class support for concurrency.
The software community has been hungering for a small, simple, easy-to-learn and pragmatic programming language. Go fits the bill with:
Simplicity Go&amp;rsquo;s beauty lies in its powerful simplicity. A list of NO&amp;rsquo;s in Go design contains generics, ternary operation, pointer arithmetic,…. These features are missing because it doesn&amp;rsquo;t fit, and it affects compilation speed, and end up making the language too complicated.</description></item><item><title>Bunk License Check</title><link>https://memo.d.foundation/memo/bunk-license-check/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/bunk-license-check/</guid><description>License detector tool: Glice Golang license and dependency checker. Prints list of all dependencies (both from std and 3rd party), number of times used, their license and saves all the license files in /licenses.
Build Clone Glice to your local workspace: $go get github.com/ribice/glice Go install to your $GOBIN: $ go install github.com/ribice/glice Run $ glice</description></item><item><title>Go Concurrency</title><link>https://memo.d.foundation/memo/go-concurrency/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/go-concurrency/</guid><description>Golang concurrency When we talk about Golang, its most basic and popular characteristic is concurrency-support. Unlike other languages what is quite complex to build an concurrency system, Go concurrency primitives via Goroutines and channels make concurrent programming easy. So i am going to talk about Goroutines and similar things in other programming languages.
Firstly, we need to know Go is a concurrent language and not a parallel one. So what is the difference from concurrency and parallelism?</description></item><item><title>Slice And Array In Golang</title><link>https://memo.d.foundation/memo/slice-and-array-in-golang/</link><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/slice-and-array-in-golang/</guid><description>Array In Go language, the terminology Array has a bit different from another language like C, JS, &amp;hellip; In Go, the array has a fixed length and type Take a look of array implementation in Go.
Its length is part of its type ([4]int and [5]int are distinct, incompatible types). For example, you can compare two arrays have the same type [4]int.
a := [4]int{1,1,1,1} b := [4]int{0,0,0,0} c := [4]int{} fmt.</description></item><item><title>Use Go Selenium To Crawl Data</title><link>https://memo.d.foundation/memo/use-go-selenium-to-crawl-data/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/use-go-selenium-to-crawl-data/</guid><description>Crawl data Crawl is a widespread issue occurring in making software. News, discount news, film ticket, etc are some examples of crawl. To be simple, it is analytics HTML, read cards, and extract data. The Go library I usually use is goquery.
However, crawling an original HTML will not work in some cases: data loaded by ajax (when reading HTML, we will only see wrapper, not data), or must login when entering a page need crawl.</description></item><item><title>Connecting Vim With Golang</title><link>https://memo.d.foundation/memo/connecting-vim-with-golang/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/connecting-vim-with-golang/</guid><description>An introduction to Vim and how to use Vim with Golang Vim is a powerful text-editor, usually used server environments with no graphical interfaces. In this post, I will layer a basic foundation of Vim and show you how to use Vim as an IDE for Go. What is Vim Vim is a highly configurable text editor built to enable efficient text editing, the next version of Vi (Vim = Vi Improved), written by Bram Moolenaar, first released in 1991.</description></item></channel></rss>