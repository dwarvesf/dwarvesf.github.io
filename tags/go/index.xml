<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Dwarves Foundation</title><link>https://memo.d.foundation/tags/go/</link><description>Recent content in Go on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 22 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines</title><link>https://memo.d.foundation/playground/_memo/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</link><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</guid><description>Introduction Go provides us great and convenient ways to write concurrent programs with high performance to execute tasks concurrently (perhaps in parallel if the program is run on a machine with multiple physical cores, GOMAXPROCS are automatically set to the number of physical cores of the machine that the program is running on)</description></item><item><title>Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq</title><link>https://memo.d.foundation/playground/_memo/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</guid><description>At Dwarves Foundation, we host a few learning sessions to understand some of the technology around us. We regularly pick up topics we find interesting to dive deeper into to understand them better and present our findings.</description></item><item><title>Unit Testing Best Practices In Golang</title><link>https://memo.d.foundation/playground/_memo/unit-testing-best-practices-in-golang/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/unit-testing-best-practices-in-golang/</guid><description>One common issue we often tackle in backend engineering is writing test cases. In this article, we will explore the techniques for crafting effective tests in Go, discussing best practices for writing unit tests and utilizing mocks to achieve better isolation.</description></item><item><title>Go In Software Engineering</title><link>https://memo.d.foundation/playground/_memo/go-in-software-engineering/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/go-in-software-engineering/</guid><description>Go is a type-safe, cloud-native language designed for simplicity with first-class support for concurrency.
The software community has been hungering for a small, simple, easy-to-learn and pragmatic programming language.</description></item><item><title>Bunk License Check</title><link>https://memo.d.foundation/playground/_memo/bunk-license-check/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/bunk-license-check/</guid><description>License detector tool: Glice Golang license and dependency checker. Prints list of all dependencies (both from std and 3rd party), number of times used, their license and saves all the license files in /licenses.</description></item><item><title>Go Concurrency</title><link>https://memo.d.foundation/playground/_memo/go-concurrency/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/go-concurrency/</guid><description>Golang concurrency When we talk about Golang, its most basic and popular characteristic is concurrency-support. Unlike other languages what is quite complex to build an concurrency system, Go concurrency primitives via Goroutines and channels make concurrent programming easy.</description></item><item><title>Slice And Array In Golang</title><link>https://memo.d.foundation/playground/_memo/slice-and-array-in-golang/</link><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/slice-and-array-in-golang/</guid><description>Array In Go language, the terminology Array has a bit different from another language like C, JS, &amp;hellip; In Go, the array has a fixed length and type Take a look of array implementation in Go.</description></item><item><title>Use Go Selenium To Crawl Data</title><link>https://memo.d.foundation/playground/_memo/use-go-selenium-to-crawl-data/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/use-go-selenium-to-crawl-data/</guid><description>Crawl data Crawl is a widespread issue occurring in making software. News, discount news, film ticket, etc are some examples of crawl.</description></item><item><title>Connecting Vim With Golang</title><link>https://memo.d.foundation/playground/_memo/connecting-vim-with-golang/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/_memo/connecting-vim-with-golang/</guid><description>An introduction to Vim and how to use Vim with Golang Vim is a powerful text-editor, usually used server environments with no graphical interfaces.</description></item></channel></rss>