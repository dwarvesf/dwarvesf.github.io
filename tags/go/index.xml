<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Dwarves Foundation</title><link>https://memo.d.foundation/tags/go/</link><description>Recent content in Go on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 13 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Commentary #11: The Gopher's LLM Revolution - Actors, Frameworks, and the Future of Go</title><link>https://memo.d.foundation/playground/00_fleeting/go-commentary-sep-13/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-commentary-sep-13/</guid><description>Go Survey The feedbacks from us - Gophers will help Go Team to understand: How Go is being used across various industries and organizations The challenges you face as a Go developer The features and improvements you’d like to see in future releases How we can better support the thriving Go community Building LLM-powered applications in Go Ah, the sweet smell of progress mixed with the stench of hype.</description></item><item><title>Who is using Go in enterprise?</title><link>https://memo.d.foundation/playground/go/who-using-golang-in-enterprise/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/who-using-golang-in-enterprise/</guid><description>Who is using Go in enterprise? Technology Giants Google
Created Go in 2007 Uses Go for many internal tools and services Examples: Kubernetes, Docker (partially) Reference: Go at Google: Language Design in the Service of Software Engineering</description></item><item><title>Efficient Union of Finite Automata in Golang: A Practical Approach</title><link>https://memo.d.foundation/playground/00_fleeting/compute-union-2-finite-automata/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/compute-union-2-finite-automata/</guid><description>1. What is Finite Automata? (A Simple Explanation) Finite Automata (FA), also known as Finite State Machines, are abstract computational models used to recognize patterns or process sequences of symbols.</description></item><item><title>Go as an Enterprise Standard Language</title><link>https://memo.d.foundation/playground/go/enterprise-standard-language/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/enterprise-standard-language/</guid><description>Go As Enterprise Standard Language What is An Enterprise standard language (From Java story)? Why Go? How to use Go in enterprise?</description></item><item><title>How to use Go in the Enterprise</title><link>https://memo.d.foundation/playground/go/how-to-use-go-in-enterprise/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/how-to-use-go-in-enterprise/</guid><description>How to use Go in enterprise? uber-go/guide
Golang for enterprise application (Reddit)
Golang Benefits and Best Practices for Highly Scalable App Development (Blog post)</description></item><item><title>When to use Go in the Enterprise</title><link>https://memo.d.foundation/playground/go/when-to-use-golang-in-enterprise/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/when-to-use-golang-in-enterprise/</guid><description> When to use Go in the Enterprise? Golang a programming language for modern enterprise applications (Blog post)</description></item><item><title>Why Go?</title><link>https://memo.d.foundation/playground/go/why-go/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/why-go/</guid><description>Why Go Historical Context The Go programming language was developed at Google by Rob Pike, Robert Griesemer, and Ken Thompson.</description></item><item><title>Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines</title><link>https://memo.d.foundation/playground/01_literature/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</link><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</guid><description>Introduction Go provides us great and convenient ways to write concurrent programs with high performance to execute tasks concurrently (perhaps in parallel if the program is run on a machine with multiple physical cores, GOMAXPROCS are automatically set to the number of physical cores of the machine that the program is running on)</description></item><item><title>Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq</title><link>https://memo.d.foundation/playground/01_literature/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</guid><description>At Dwarves Foundation, we host a few learning sessions to understand some of the technology around us. We regularly pick up topics we find interesting to dive deeper into to understand them better and present our findings.</description></item><item><title>Unit Testing Best Practices In Golang</title><link>https://memo.d.foundation/playground/01_literature/unit-testing-best-practices-in-golang/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/unit-testing-best-practices-in-golang/</guid><description>One common issue we often tackle in backend engineering is writing test cases. In this article, we will explore the techniques for crafting effective tests in Go, discussing best practices for writing unit tests and utilizing mocks to achieve better isolation.</description></item><item><title>Go In Software Engineering</title><link>https://memo.d.foundation/playground/01_literature/go-in-software-engineering/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/go-in-software-engineering/</guid><description>Go is a type-safe, cloud-native language designed for simplicity with first-class support for concurrency.
The software community has been hungering for a small, simple, easy-to-learn and pragmatic programming language.</description></item><item><title>Bunk License Check</title><link>https://memo.d.foundation/playground/01_literature/bunk-license-check/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/bunk-license-check/</guid><description>License detector tool: Glice Golang license and dependency checker. Prints list of all dependencies (both from std and 3rd party), number of times used, their license and saves all the license files in /licenses.</description></item><item><title>Go Concurrency</title><link>https://memo.d.foundation/playground/01_literature/go-concurrency/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/go-concurrency/</guid><description>Golang concurrency When we talk about Golang, its most basic and popular characteristic is concurrency-support. Unlike other languages what is quite complex to build an concurrency system, Go concurrency primitives via Goroutines and channels make concurrent programming easy.</description></item><item><title>Slice And Array In Golang</title><link>https://memo.d.foundation/playground/01_literature/slice-and-array-in-golang/</link><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/slice-and-array-in-golang/</guid><description>Array TL;DR: The different between array in Go and C:
Arrays are values. Assigning one array to another copies all the elements.</description></item><item><title>Use Go Selenium To Crawl Data</title><link>https://memo.d.foundation/playground/01_literature/use-go-selenium-to-crawl-data/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/use-go-selenium-to-crawl-data/</guid><description>Crawl data Crawl is a widespread issue occurring in making software. News, discount news, film ticket, etc are some examples of crawl.</description></item><item><title>Connecting Vim With Golang</title><link>https://memo.d.foundation/playground/01_literature/connecting-vim-with-golang/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/connecting-vim-with-golang/</guid><description>An introduction to Vim and how to use Vim with Golang Vim is a powerful text-editor, usually used server environments with no graphical interfaces.</description></item></channel></rss>