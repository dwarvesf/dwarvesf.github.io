<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift on Dwarves Foundation</title><link>https://memo.d.foundation/tags/swift/</link><description>Recent content in Swift on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Thu, 05 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Xpc Services On Macos App Using Swift</title><link>https://memo.d.foundation/memo/xpc-services-on-macos-app-using-swift/</link><pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/xpc-services-on-macos-app-using-swift/</guid><description>Before XPC we used to pick up Sockets and Mach Messages (Mach Ports).
XPC for communicating processes The XPC mechanism offers an alternative to sockets (or Mach Services using MIG) for IPC. We could have, for example, a process that acts as a “server” waiting for clients to access its API and provide some service.
XPC Services on applications When we talk about XPC Services (capital ‘S’), we are referring to the bundle called XPC Service.</description></item><item><title>Create Circular Text Using Swiftui</title><link>https://memo.d.foundation/memo/create-circular-text-using-swiftui/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/create-circular-text-using-swiftui/</guid><description>This is what we have when finished.
Fire up your Xcode and create new SwiftUI Project.
Create new SwiftUI file and named it CircularText.
The first two attributes for our control of course is String and Radius for our circular.
Add 2 Attribute named
To make a circle text we split out string to array of character, each character will have it own Text control then we going to rotate the text to match circle.</description></item><item><title>Draw Watch Face Using Swiftui</title><link>https://memo.d.foundation/memo/draw-watch-face-using-swiftui/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/draw-watch-face-using-swiftui/</guid><description>SwiftUI are nice and fun to working with. You can read my previous article to get a bit knowledge about create circular control, it will make you easy to working with this article. This article also use Shape and Path, if you have worked with CoreGraphic before you will find it similar With CALayer, CAShapeLayer and UIBezierPath.
Create Circular Text using SwiftUI
First of all, let split watch to small components for easy coding.</description></item><item><title>Swiftui</title><link>https://memo.d.foundation/memo/swiftui/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/swiftui/</guid><description>Introduces by Apple in WWDC 2019, Swift UI impressed the technophiles with its convenience, as Apple aimed to help developers conduct code easier and spend more time working on other modified functions. This blog outlines my opinion about SwiftUI, such as how to layout views, handle user input, making a custom view, making a cross Apple platform apps, underlying architecture, integrate with UIKit (the old Apple UI framework). It won&amp;rsquo;t be expanded on an advanced level like fancy animation or proposing any best architecture we should follow.</description></item><item><title>Uidynamicanimator</title><link>https://memo.d.foundation/memo/uidynamicanimator/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/uidynamicanimator/</guid><description>Definition A dynamic item is any iOS or custom object that conforms to the UIDynamicItem protocol. The UIView and UICollectionViewLayoutAttributes classes implement this protocol in iOS 7 and later. You can implement this protocol to use a dynamic animator with custom objects for such purposes as reacting to rotation or position changes computed by an animator.
To use dynamics, configure one or more dynamic behaviors—including providing each with a set of dynamic items—and then add those behaviors to a dynamic animator.</description></item><item><title>Reproduce Apple Find Me Bottom Menu View</title><link>https://memo.d.foundation/memo/reproduce-apple-find-me-bottom-menu-view/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/reproduce-apple-find-me-bottom-menu-view/</guid><description>Today we are going to recreate Find Me Bottom Menu view in few lines of code.
Device list Bottom Menu has three states: Collapsed, HalfExpanded and Expanded like images below
What we should do:
Bottom View can update itself height follow user finger position when dragging (Pan Gesture) Bottom View can automatically resize its height base on the direction of dragging and position compare to “half position” Create an XCode project, add a new UIView and named it to BottomMenuView.</description></item><item><title>Build A Passcode View With Swift</title><link>https://memo.d.foundation/memo/build-a-passcode-view-with-swift/</link><pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/memo/build-a-passcode-view-with-swift/</guid><description>The highlights before we are write our code.
Our Passcode view can “becomeFirstResponder” and “resignFirstResponder” to show and hide virtual keyboard if needed. =&amp;gt; Our Passcode nearly same with TextField.
Define our passcode view:
By default, to show keyboard on the screen user should touch in TextField or TextView to edit. We can make our custom view as keyboard input view by override “canBecomeFirstReponder” method and conform to UIKeyInput Protocol</description></item></channel></rss>