<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macos on Dwarves Foundation</title><link>https://note.d.foundation/tags/macos/</link><description>Recent content in Macos on Dwarves Foundation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2023 Dwarves Foundation.</copyright><lastBuildDate>Thu, 05 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://note.d.foundation/tags/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>Xpc Services On Macos App Using Swift</title><link>https://note.d.foundation/memo/xpc-services-on-macos-app-using-swift/</link><pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/xpc-services-on-macos-app-using-swift/</guid><description>Before XPC we used to pick up Sockets and Mach Messages (Mach Ports).
XPC for communicating processes The XPC mechanism offers an alternative to sockets (or Mach Services using MIG) for IPC. We could have, for example, a process that acts as a “server” waiting for clients to access its API and provide some service.
XPC Services on applications When we talk about XPC Services (capital ‘S’), we are referring to the bundle called XPC Service.</description></item><item><title>Daemons And Services Programming Guide</title><link>https://note.d.foundation/memo/daemons-and-services-programming-guide/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/daemons-and-services-programming-guide/</guid><description>About Daemons and Services Many kinds of tasks that do not require user interaction are most effectively handled by a process that runs in the background. You can use a daemon or service to:
Provide server functionality, such serving web pages. Coordinate access to of a shared resource, such as a database. Perform work for a foreground application, such as file system access.
Terminology Note: The terms service and daemon have several meanings in different contexts, with further variation over time and from one development community to another.</description></item><item><title>Uidynamicanimator</title><link>https://note.d.foundation/memo/uidynamicanimator/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://note.d.foundation/memo/uidynamicanimator/</guid><description>Definition A dynamic item is any iOS or custom object that conforms to the UIDynamicItem protocol. The UIView and UICollectionViewLayoutAttributes classes implement this protocol in iOS 7 and later. You can implement this protocol to use a dynamic animator with custom objects for such purposes as reacting to rotation or position changes computed by an animator.
To use dynamics, configure one or more dynamic behaviors—including providing each with a set of dynamic items—and then add those behaviors to a dynamic animator.</description></item></channel></rss>