<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Labs Team on Dwarves Foundation</title><link>https://memo.d.foundation/playground/</link><description>Recent content in Labs Team on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 12 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/index.xml" rel="self" type="application/rss+xml"/><item><title>Erlang Finite State Machine</title><link>https://memo.d.foundation/playground/00_fleeting/erlang-fsm/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/erlang-fsm/</guid><description>Finite State Machines (FSMs) are a crucial concept in computer science and software development, providing a robust method for modeling the behavior of systems.</description></item><item><title>Go Commentary July 08</title><link>https://memo.d.foundation/playground/00_fleeting/go-commentary-jul-12/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-commentary-jul-12/</guid><description>Writing generic collection types in Go: the missing documentation Context:
Generics were released in Go 1.18 (~2y), is not used very much - only in some good cases for methods in slices and maps packages.</description></item><item><title>RAPTOR: Tree-based Retrieval for Language Models</title><link>https://memo.d.foundation/playground/00_fleeting/raptor-llm-retrieval/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/raptor-llm-retrieval/</guid><description>What is it? RAPTOR (Recursive Abstractive Processing for Tree-Organized Retrieval) is a new technique for improving retrieval-augmented language models, particularly for long documents: https://arxiv.</description></item><item><title>Devbox Map of Content</title><link>https://memo.d.foundation/playground/-devbox/</link><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/-devbox/</guid><description> Memos Devbox Map of Content Using Devbox to setup local development environment The overview into Nix &amp;amp; how we use Devbox @ Dwarves Our Docker adoption and its challenges The world before Docker</description></item><item><title>Go Weekly: Go 1.23 Iterators</title><link>https://memo.d.foundation/playground/00_fleeting/go-weekly-511/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-weekly-511/</guid><description>Why People are Angry over Go 1.23 Iterators Context:
Most languages provide standardized way to iterate over values stored in containers.</description></item><item><title>Proximal Policy Optimization</title><link>https://memo.d.foundation/playground/00_fleeting/proximal-policy-optimization/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/proximal-policy-optimization/</guid><description>Introduction Proximal Policy Optimization (PPO) is an algorithm that aims to improve the stability of training by avoiding overly large policy updates.</description></item><item><title>Rust Trait</title><link>https://memo.d.foundation/playground/00_fleeting/rust-trait/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/rust-trait/</guid><description>Rust&amp;rsquo;s trait system is a powerful feature that enables developers to define shared behavior across different types. Traits play a crucial role in achieving code reusability, abstraction, and flexibility.</description></item><item><title>Go Weekly: Mastering Go Performance - eBPF and PGO Optimization Techniques</title><link>https://memo.d.foundation/playground/00_fleeting/go-weekly-510/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-weekly-510/</guid><description>An Applied Introduction to eBPF with Go Context:
We usually write software in user space (outside the OS&amp;rsquo;s kernel, e.</description></item><item><title>Explaining Gradient Descent in Machine Learning with a simple analogy</title><link>https://memo.d.foundation/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy/</guid><description>Gradient descent is a fundamental optimization algorithm in machine learning. It&amp;rsquo;s a bit like finding your way down a mountain in the fog: you take small steps in the direction that seems to be going downhill the fastest.</description></item><item><title>Organize team know-how with Zettelkasten Method</title><link>https://memo.d.foundation/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method/</guid><description>Whenever you dive into a topic, there&amp;rsquo;s always a mix of what you know and what&amp;rsquo;s new to you. It is important to leverage what you already know, learn new information related to it, and see the connection between them.</description></item><item><title>How to talk to ChatGPT effectively</title><link>https://memo.d.foundation/playground/00_fleeting/how-to-talk-to-chatgpt-effectively/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/how-to-talk-to-chatgpt-effectively/</guid><description>ChatGPT, an advanced language model by OpenAI, offers a unique way to interact with AI. The quality of results depends on the information and how well you craft your input.</description></item></channel></rss>