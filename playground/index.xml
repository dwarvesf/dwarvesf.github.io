<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Labs Team on Dwarves Foundation</title><link>https://memo.d.foundation/playground/</link><description>Recent content in Labs Team on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 09 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/index.xml" rel="self" type="application/rss+xml"/><item><title>Devbox Map of Content</title><link>https://memo.d.foundation/playground/-devbox/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/-devbox/</guid><description>The Reason Explore the motivations and benefits behind adopting Devbox for development environment management.
The reason for being Foundation Stones Understand the core concepts and components that form the basis of Devbox&amp;rsquo;s functionality.</description></item><item><title>Go Commentary Aug 02</title><link>https://memo.d.foundation/playground/00_fleeting/go-commentary-aug-02/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-commentary-aug-02/</guid><description>Go Features By Version Context:
Go is released every six months. Each major Go release is supported until there are two newer major releases.</description></item><item><title>Containerless Development with Devbox</title><link>https://memo.d.foundation/playground/devbox/guide/containerless/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/guide/containerless/</guid><description>By taking advantage of Devbox Services and Devbox Plugins, we can create a container-less Devbox environment for local development.
Let&amp;rsquo;s go through a Golang Backend Application.</description></item><item><title>Content-addressable Storage in Docker</title><link>https://memo.d.foundation/playground/devbox/research/content-addressable-storage-in-docker/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/content-addressable-storage-in-docker/</guid><description>For your information if you don&amp;rsquo;t know or just forget that Docker image is layered. Each instruction in Dockerfile lets a separate layer be built.</description></item><item><title>Devbox Plugins: Enhancing Package Setup and Configuration</title><link>https://memo.d.foundation/playground/devbox/introduction/-devbox-plugins/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/-devbox-plugins/</guid><description>Devbox is based on Nix. However, you don&amp;rsquo;t need Nix knowledge to interact with Devbox. Some packages require additional setup to work, which is why Plugins were introduced to Devbox.</description></item><item><title>Devbox Services: Managing Daemon Applications with process-compose</title><link>https://memo.d.foundation/playground/devbox/introduction/-devbox-services/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/-devbox-services/</guid><description>Docker has docker-compose, Nix has process-compose, both of them are used as scheduler and orchestrator to manage daemon applications. For example: running postgresql locally, to serve your backend.</description></item><item><title>Devbox: A Nix-Powered Development Environment Tool</title><link>https://memo.d.foundation/playground/devbox/introduction/-devbox/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/-devbox/</guid><description>Devbox is a command-line tool that allows us to easily create a predictable development environment powered by Nix. By using ¶ Nix Shell, Devbox provides an environment that is reproducible, isolated, and portable.</description></item><item><title>Devbox.json Configuration Reference</title><link>https://memo.d.foundation/playground/devbox/guide/devbox.json/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/guide/devbox.json/</guid><description>References devbox.json Reference | Devbox. (n.d.). Jetify. Retrieved July 28, 2024, from https://www.jetify.com/devbox/docs/configuration/</description></item><item><title>Docker Build Issues</title><link>https://memo.d.foundation/playground/devbox/research/-docker-issues/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/-docker-issues/</guid><description>Docker build is not deterministic. This means that with the same Dockerfile, different build times (or builds on different machines) can result in different outcomes.</description></item><item><title>Effective Development Environment Management with Devbox</title><link>https://memo.d.foundation/playground/devbox/introduction/effective-development-environment-management/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/effective-development-environment-management/</guid><description>What does effective development environment management look like in your mind? Does it include the following?
A consistent shell for everyone on the team Trying new tools without polluting your laptop Not sacrificing speed Saying goodbye to conflicting versions Taking your environment with you Devbox gives us the ability to achieve all of the above.</description></item><item><title>Fixed-output Derivation in Nix</title><link>https://memo.d.foundation/playground/devbox/research/fixed-output-derivation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/fixed-output-derivation/</guid><description>On different machines with different nixpkgs versions, Nix build will result different packages.
To handle this issue, Fixed-output derivation is raised.</description></item><item><title>Nix - Build the same thing at any time</title><link>https://memo.d.foundation/playground/devbox/research/-nix---build-the-same-thing-at-any-time/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/-nix---build-the-same-thing-at-any-time/</guid><description>Nix gives us the ability to build Docker image with minimum deterministic by providing some solid mechanisms.
Firstly, using Nix, we can specify exactly the version of each package and its dependencies, and keep it completely the same each time the package build happens.</description></item><item><title>Nix - Minimum changes, Minimum redundancies</title><link>https://memo.d.foundation/playground/devbox/research/-nix---minimum-changes-minimum-redundancies/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/-nix---minimum-changes-minimum-redundancies/</guid><description>The reproducible issue is resolved in the previous part. But we still have another problem when using Docker build, it is shadow copies.</description></item><item><title>Nix Flakes: Reproducible and Discoverable Nix Packages</title><link>https://memo.d.foundation/playground/devbox/introduction/-nix-flakes/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/-nix-flakes/</guid><description>A Flake is essentially a file system managed by a file named flake.nix that we can modify. Additionally, a flake.lock file is used to lock dependency versions.</description></item><item><title>Nix in Building Docker Images</title><link>https://memo.d.foundation/playground/devbox/research/-nix-in-building-docker-images/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/-nix-in-building-docker-images/</guid><description>Nix is a powerful tool for building Docker images. It allows us to build Docker images in a deterministic way.</description></item><item><title>Nix is Faster Than Docker Build</title><link>https://memo.d.foundation/playground/devbox/research/nix-is-faster-than-docker-build/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-is-faster-than-docker-build/</guid><description>As I mentioned in the Build the same thing at any time, Nix knows the exact content of packages and dependencies before builds.</description></item><item><title>Nix Shell: Isolated Development Environments</title><link>https://memo.d.foundation/playground/devbox/introduction/-nix-shell/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/-nix-shell/</guid><description>Nix Shell is essentially a command provided by Nix that drops us into an isolated shell environment. In this environment, we can perform any operation without mutating the global state of the host machine&amp;rsquo;s system.</description></item><item><title>Pinning nixpkgs in Nix</title><link>https://memo.d.foundation/playground/devbox/research/pinning-nixpkgs/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/pinning-nixpkgs/</guid><description>Pinning nixpkgs means you can choose the version of nixpkgs, and then all packages required for building your application and its dependencies are fetched from this nixpkgs version where the version of each package is specified and not changed over time.</description></item><item><title>Running Your Own Shell with Devbox</title><link>https://memo.d.foundation/playground/devbox/guide/run-your-own-shell/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/guide/run-your-own-shell/</guid><description>Once we installed Devbox using curl -fsSL https://get.jetify.com/devbox | bash, we can run our own shell in two ways global or local inside our specific project.</description></item><item><title>Shadow Copies in Docker Builds</title><link>https://memo.d.foundation/playground/devbox/research/shadow-copies/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/shadow-copies/</guid><description>One more issue that comes from internet access of Docker build is Shadow copies aka redundant files that are not cleaned after new versions of packages are installed.</description></item><item><title>The reason for being</title><link>https://memo.d.foundation/playground/devbox/introduction/the-reason-for-being/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/the-reason-for-being/</guid><description>The Pursuit of Consistency In our pursuit of creating consistent development experiences for our team, we initially turned to Docker.</description></item><item><title>Unstable Package Installation in Docker</title><link>https://memo.d.foundation/playground/devbox/research/unstable-package-installation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/unstable-package-installation/</guid><description>For example, lets suppose that we have following Dockerfile.
FROM ubuntu:20.04 RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3 Imagine that the first time you build your Docker image, the version of Python is 3.</description></item><item><title>Why Devbox But Not Nix?</title><link>https://memo.d.foundation/playground/devbox/introduction/why-devbox-but-not-nix/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/why-devbox-but-not-nix/</guid><description>Once we choose to use Devbox, it means we want to focus on finding a way to build an Effective Development Environment Management quickly and simply.</description></item><item><title>Go Commentary July 26</title><link>https://memo.d.foundation/playground/00_fleeting/go-commentary-jul-26/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-commentary-jul-26/</guid><description>Using Go to send 500 Million HTTP Requests to 2.5 Million Hosts Context:
(Ethical hacking) To send 500 million of non RFC HTTP/1.</description></item><item><title>Subscription Pricing Models</title><link>https://memo.d.foundation/playground/00_fleeting/subscription-pricing-models/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/subscription-pricing-models/</guid><description>Pricing Models Freemium Model Description: Attracts users with a free basic version, encouraging upgrades to paid plans for premium features.</description></item><item><title>Function calling in AI agents</title><link>https://memo.d.foundation/playground/00_fleeting/function-calling/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/function-calling/</guid><description>Introduction Function calling is a critical component in the architecture of AI agents, facilitating the integration of external functionalities and resources.</description></item><item><title>Erlang Finite State Machine</title><link>https://memo.d.foundation/playground/00_fleeting/erlang-fsm/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/erlang-fsm/</guid><description>Finite State Machines (FSMs) are a crucial concept in computer science and software development, providing a robust method for modeling the behavior of systems.</description></item><item><title>Go Commentary July 08</title><link>https://memo.d.foundation/playground/00_fleeting/go-commentary-jul-12/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-commentary-jul-12/</guid><description>Writing generic collection types in Go: the missing documentation Context:
Generics were released in Go 1.18 (~2y), is not used very much - only in some good cases for methods in slices and maps packages.</description></item><item><title>RAPTOR: Tree-based Retrieval for Language Models</title><link>https://memo.d.foundation/playground/00_fleeting/raptor-llm-retrieval/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/raptor-llm-retrieval/</guid><description>What is it? RAPTOR (Recursive Abstractive Processing for Tree-Organized Retrieval) is a new technique for improving retrieval-augmented language models, particularly for long documents: https://arxiv.</description></item><item><title>Go Weekly: Go 1.23 Iterators</title><link>https://memo.d.foundation/playground/00_fleeting/go-weekly-511/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-weekly-511/</guid><description>Why People are Angry over Go 1.23 Iterators Context:
Most languages provide standardized way to iterate over values stored in containers.</description></item><item><title>Proximal Policy Optimization</title><link>https://memo.d.foundation/playground/00_fleeting/proximal-policy-optimization/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/proximal-policy-optimization/</guid><description>Introduction Proximal Policy Optimization (PPO) is an algorithm that aims to improve the stability of training by avoiding overly large policy updates.</description></item><item><title>Rust Trait</title><link>https://memo.d.foundation/playground/00_fleeting/rust-trait/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/rust-trait/</guid><description>Rust&amp;rsquo;s trait system is a powerful feature that enables developers to define shared behavior across different types. Traits play a crucial role in achieving code reusability, abstraction, and flexibility.</description></item><item><title>Go Weekly: Mastering Go Performance - eBPF and PGO Optimization Techniques</title><link>https://memo.d.foundation/playground/00_fleeting/go-weekly-510/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/go-weekly-510/</guid><description>An Applied Introduction to eBPF with Go Context:
We usually write software in user space (outside the OS&amp;rsquo;s kernel, e.</description></item><item><title>Explaining Gradient Descent in Machine Learning with a simple analogy</title><link>https://memo.d.foundation/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy/</guid><description>Gradient descent is a fundamental optimization algorithm in machine learning. It&amp;rsquo;s a bit like finding your way down a mountain in the fog: you take small steps in the direction that seems to be going downhill the fastest.</description></item><item><title>Organize team know-how with Zettelkasten Method</title><link>https://memo.d.foundation/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method/</guid><description>Whenever you dive into a topic, there&amp;rsquo;s always a mix of what you know and what&amp;rsquo;s new to you. It is important to leverage what you already know, learn new information related to it, and see the connection between them.</description></item><item><title>How to talk to ChatGPT effectively</title><link>https://memo.d.foundation/playground/00_fleeting/how-to-talk-to-chatgpt-effectively/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/how-to-talk-to-chatgpt-effectively/</guid><description>ChatGPT, an advanced language model by OpenAI, offers a unique way to interact with AI. The quality of results depends on the information and how well you craft your input.</description></item></channel></rss>